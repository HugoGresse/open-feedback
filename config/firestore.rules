service cloud.firestore {
    match /databases/{database}/documents {

        // Verification functions
        function authenticated() { return request.auth.uid != null }
        function limitOne() { return request.query.limit <= 1 }
        function userNotExists() { return !exists(/databases/$(database)/documents/users/$(request.auth.uid)) }
        function itsMyDocument(userId) { return request.auth.uid == userId }
        function isAdmin(data) { return data.owner == request.auth.uid || request.auth.uid in data.members}
        function isAnonymous() { return request.auth.token.firebase.sign_in_provider == 'anonymous'}
        function isEmailVerified() { return request.auth.token.email_verified == true }
        function isPhoneNumberAccount() { return request.auth.token.firebase.sign_in_provider == 'phone' }

        // Get functions
        function projectData(projectId) { return get(/databases/$(database)/documents/projects/$(projectId)).data }

        match /users/{userId} {
            allow get: if authenticated() && !isAnonymous();
            allow list: if authenticated() && itsMyDocument(userId) && limitOne();
            allow create: if authenticated() && itsMyDocument(userId) && userNotExists();
            allow update: if authenticated() && itsMyDocument(userId);
        }

        // PROJECTS
        match /projects/{projectId} {
            allow get: if true;
            allow list: if authenticated() && isAdmin(resource.data) && (isEmailVerified() || isPhoneNumberAccount());
            allow create: if authenticated();
            allow update: if authenticated() && isAdmin(resource.data) && (isEmailVerified() || isPhoneNumberAccount());
            allow delete: if authenticated() && isAdmin(resource.data) && (isEmailVerified() || isPhoneNumberAccount());

            // Deprecated
            match /voteItems/{voteItemsId} {
                allow list: if true;
                allow write: if authenticated() && isAdmin(projectData(projectId));
            }

            // Should be replaced by aggregated votes...
            match /sessionVotes/{session} {
                allow list: if true;
            }

            match /aggregatedVotes/{session} {
                allow list: if true;

                match /{voteItemIdCollection}/{shardId} {
                    allow list: if true;
                }
            }

            match /userVotes/{ref} {
                allow read: if authenticated() && resource.data.userId == request.auth.uid || isAdmin(projectData(projectId));
                allow create: if authenticated() && request.resource.data.userId == request.auth.uid;
                allow update: if authenticated() && resource.data.userId == request.auth.uid;
            }

            match /speakers/{speakerId} {
                allow get: if true;
                allow list: if true;
                allow write: if authenticated() && isAdmin(projectData(projectId));
            }

            match /talks/{talkId} {
                allow get: if true;
                allow list: if true;
                allow write: if authenticated() && isAdmin(projectData(projectId));
            }
        }

        // PROJECTS INVITE
        match /projects-invites/{inviteId} {
            allow get: if authenticated();
            allow list: if authenticated() && (isDestinedToMe(resource.data) || isAdmin(projectData(resource.data.projectId)));
            allow create: if authenticated() && isAdmin(projectData(request.resource.data.projectId));
            allow delete: if authenticated() && isAdmin(projectData(resource.data.projectId));

            function isDestinedToMe(data) { return request.auth.token.email == data.destinationUserInfo }
        }
    }
}
