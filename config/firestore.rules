service cloud.firestore {
    match /databases/{database}/documents {

        function authenticated() { return request.auth.uid != null }
        function limitOne() { return request.query.limit <= 1 }
        function userNotExists() { return !exists(/databases/$(database)/documents/users/$(request.auth.uid)) }
        function itsRequestedByMe() { return request.resource.data.uid == request.auth.uid }
        function itsMyDocument(userId) { return request.auth.uid == userId }
        function isAdmin(data) { return data.owner == request.auth.uid || request.auth.uid in data.members}
        function isAnonymous() { return request.auth.token.firebase.sign_in_provider == 'anonymous'}

        match /users/{userId} {
            allow get: if authenticated() && !isAnonymous();
            allow list: if authenticated() && itsMyDocument(userId) && limitOne();
            allow create: if authenticated() && itsMyDocument(userId) && userNotExists();
            allow update: if authenticated() && itsMyDocument(userId);
        }

        // PROJECTS
        match /projects/{projectId} {
            allow get: if true;
            allow list: if authenticated() && isAdmin(resource.data);
            allow create: if authenticated();
            allow update: if authenticated() && isAdmin(resource.data);

            function projectData() { return get(/databases/$(database)/documents/projects/$(projectId)).data }

            match /voteItems/{voteItemsId} {
                allow list: if true;
                allow write: if authenticated() && isAdmin(projectData());
            }

            // Deprecated soon
            match /sessionVotes/{session} {
                allow list: if true;
            }

            match /aggregatedVotes/{session} {
                allow list: if true;
            }

            match /userVotes/{ref} {
                allow read: if authenticated() && resource.data.userId == request.auth.uid || isAdmin(projectData());
                allow create: if authenticated() && request.resource.data.userId == request.auth.uid;
                allow update: if authenticated() && resource.data.userId == request.auth.uid;
                allow delete: if authenticated() && resource.data.userId == request.auth.uid;
            }

        }
    }
}
